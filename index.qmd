---
title: "Translation Elicitation: laboratory notes"
date: "Last updated: `r format(Sys.Date(), '%d/%m/%Y')`"
format:
    html:
        toc: true
        number-sections: true
        bibliography: "references.bib"
        csl: "apa7.csl"
        warnings: false
        messages: false
        fig-dpi: 600
        out-width: "80%"
        code-fold: true
        code-tools: true
        code-line-numbers: true
        code-link: true
---


```{r}
#| label: setup
#| include: false
set.seed(888)

my_colours <- c("#1A85FF", "#ff2976", "#FFC20A")

options(
    knitr.kable.NA = '-',
    htmltools.preserve.raw = FALSE,
    knitr.duplicate.label = "allow",
    ggplot2.discrete.fill = my_colours,
    ggplot2.discrete.colour = my_colours,
    ggplot2.continuous.fill = ggplot2::scale_fill_gradient2(
        low = "#04bf78", 
        mid = "white", 
        high = "#FFC20A", 
        na.value = "white", 
        limits = c(-0.4, 0.4)
    ),
    ggplot2.continuous.colour = ggplot2::scale_fill_gradient2(
        low = "#04bf78", 
        mid = "white",
        high = my_colours[3], 
        na.value = "white",
        limits = c(-0.4, 0.4)
    )
)

# load targets
tar_load_all()

# set custom ggplot theme
theme_set(theme_custom())
```


# Study 1

## Stimuli 

::: {.panel-tabset}

### Summary

Participants in the spa-ENG listened to `r nrow(stimuli[stimuli$group=="spa-ENG",])` Spanish words, and participants in the cat-ENG and the cat-SPA groups listened to `r nrow(stimuli[stimuli$group=="cat-ENG",])` trials. Five trials in each condition were practice trials and were excluded from analyses.


```{r}
#| label: tbl-stimuli
#| tbl-cap: "Lexical frequency, phonological neigbourhood size, and levenshtein distance of the stimuli words."
#| tbl-subcap: "Median and standard deviation (*SD*) of lexical frequencies of target words (expressed in counts per million and as Zipf scores), density of higher-frequency phonological neighbourhoods of target words, and normalised Levenshtein phonological similarity between the presented and the target words."
stimuli %>% 
    select(group, word_1, freq_2, freq_zipf_2, nd, lv) %>% 
    group_by(group) %>% 
    summarise(
        across(
            freq_2:lv, 
            list(
                median = ~median(., na.rm = TRUE),
                sd = ~sd(., na.rm = TRUE)
            )
        )
    ) %>%
    gt(rowname_col = "group") %>% 
    fmt_integer(n) %>% 
    fmt_number(freq_2_median:nd_sd) %>%
    fmt_percent(matches("lv|global")) %>% 
    tab_spanner(
        md("**Freq. (million)**"),
        c("freq_2_median", "freq_2_sd", "freq_zipf_2_median", "freq_zipf_2_sd")
    ) %>% 
    tab_spanner(md("**Freq. (Zipf)**"), matches("freq_zipf_2")) %>% 
    tab_spanner(md("**Neighbours**"), matches("nd")) %>% 
    tab_spanner(md("**Levenshtein**"), matches("lv")) %>% 
    cols_label(
        freq_2_median = md("Median"),
        freq_2_sd = md("*SD*"),
        freq_zipf_2_median = md("Median"),
        freq_zipf_2_sd = md("*SD*"),
        nd_median = md("Median"),
        nd_sd = md("*SD*"),
        lv_median = md("Median"),
        lv_sd = md("*SD*")
    ) %>% 
    summary_rows(
        columns = c(matches("median"), -matches("lv")),
        fns = list(Median = "median", SD = "sd")
    ) %>% 
    summary_rows(
        columns = matches("lv"),
        fns = list(Median = "median", SD = "sd"), 
        formatter = fmt_percent
    ) %>% 
    tab_style(
        style = cell_text(align = "left", weight = "bold", size = "medium"),
        locations = cells_title(groups = "title")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", size = "medium", style = "italic"),
        locations = cells_title(groups = "subtitle")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", size = "medium"),
        locations = cells_source_notes()
    ) %>% 
    tab_style(
        style = cell_text(align = "left", size = "medium"),
        locations = cells_stub_grand_summary()
    ) %>% 
    tab_style(
        style = cell_borders(sides = c("left", "right"), color = "white"),
        locations = list(
            cells_body(),
            cells_row_groups(),
            cells_column_spanners(), 
            cells_stub(),
            cells_stub_grand_summary(), 
            cells_source_notes(),
            cells_column_labels(),
            cells_stubhead()
        )
    ) %>% 
    tab_style(
        style = list(
            cell_text(align = "left", size = "medium"),
            cell_borders(sides = "all", color = "white")
        ),
        locations = cells_stub()
    ) %>% 
    tab_style(
        style = cell_text(
            align = "center", 
            size = "medium",
            weight = "normal",
            style = "normal"
        ),
        locations = list(
            cells_column_spanners(),
            cells_column_labels()
        )
    ) %>% 
    tab_style(
        style = cell_borders(sides = "all", color = "white"),
        locations = cells_body(columns = 1:9)
    ) %>% 
    tab_style(
        style = cell_borders(sides = "top", color = "white"),
        locations = cells_body(columns = 1:9)
    )
```

### cat-ENG

```{r}
#| label: tbl-stimuli-cateng
stimuli %>% 
    filter(group=="cat-ENG") %>% 
    mutate(
        word_1 = paste0(word_1, " (", ipa_flat_1, ")"),
        word_2 = paste0(word_2, " (", ipa_flat_2, ")"),
        # nd_list = paste0(nd_list, collapse = ", ")
    ) %>% 
    select(word_1, word_2, duration, freq_zipf_2, lv, lv_dist, nd, nd_list) %>% 
    gt() %>% 
    fmt_number(where(is.numeric)) %>% 
    fmt_integer(c(nd, lv_dist)) %>%
    fmt_percent(lv) %>% 
    fmt_missing(everything(), everything(), "---") %>% 
    tab_spanner("Cross-language phonological neighbours", nd:nd_list) %>% 
    tab_spanner("Phonological similarity", lv:lv_dist) %>% 
    cols_label(
        word_1 = "Presented word (Catalan)",
        word_2 = "Correct translation (English)",
        freq_zipf_2 = str_wrap("Translation lexical frequency (Zipf)", 12),
        lv = "Levenshtein similarity",
        lv_dist = "Levenshtein distance",
        duration = "Audio duration (s)",
        nd = "N",
        nd_list = "Neighbours"
    ) %>% 
    tab_style(
        cell_text(align = "left", weight = "bold"),
        cells_column_spanners()
    ) %>% 
    tab_style(
        cell_text(style = "italic", align = "left"),
        list(cells_column_labels())
    ) %>% 
    tab_style(
        cell_text(align = "left"),
        cells_body()
    ) %>% 
    tab_style(
        cell_text(size = "x-small"),
        cells_body(columns = nd_list, rows = everything())
    )
```

### spa-ENG

```{r}
#| label: tbl-stimuli-spaeng
stimuli %>% 
    filter(group=="spa-ENG") %>% 
    mutate(
        word_1 = paste0(word_1, " (", ipa_flat_1, ")"),
        word_2 = paste0(word_2, " (", ipa_flat_2, ")"),
        # nd_list = paste0(nd_list, collapse = ", ")
    ) %>% 
    select(word_1, word_2, duration, freq_zipf_2, lv, lv_dist, nd, nd_list) %>% 
    gt() %>% 
    fmt_number(where(is.numeric)) %>% 
    fmt_integer(c(nd, lv_dist)) %>%
    fmt_percent(lv) %>% 
    fmt_missing(everything(), everything(), "---") %>% 
    tab_spanner("Cross-language phonological neighbours", nd:nd_list) %>% 
    tab_spanner("Phonological similarity", lv:lv_dist) %>% 
    cols_label(
        word_1 = "Presented word (Spanish)",
        word_2 = "Correct translation (English)",
        freq_zipf_2 = str_wrap("Translation lexical frequency (Zipf)", 12),
        lv = "Levenshtein similarity",
        lv_dist = "Levenshtein distance",
        duration = "Audio duration (s)",
        nd = "N",
        nd_list = "Neighbours"
    ) %>% 
    tab_style(
        cell_text(align = "left", weight = "bold"),
        cells_column_spanners()
    ) %>% 
    tab_style(
        cell_text(style = "italic", align = "left"),
        list(cells_column_labels())
    ) %>% 
    tab_style(
        cell_text(align = "left"),
        cells_body()
    ) %>% 
    tab_style(
        cell_text(size = "x-small"),
        cells_body(columns = nd_list, rows = everything())
    )
```

### cat-SPA

```{r}
#| label: tbl-stimuli-catspa
stimuli %>% 
    filter(group=="cat-SPA") %>% 
    mutate(
        word_1 = paste0(word_1, " (", ipa_flat_1, ")"),
        word_2 = paste0(word_2, " (", ipa_flat_2, ")"),
        # nd_list = paste0(nd_list, collapse = ", ")
    ) %>% 
    select(word_1, word_2, duration, freq_zipf_2, lv, lv_dist, nd, nd_list) %>% 
    gt() %>% 
    fmt_number(where(is.numeric)) %>% 
    fmt_integer(c(nd, lv_dist)) %>%
    fmt_percent(lv) %>% 
    fmt_missing(everything(), everything(), "---") %>% 
    tab_spanner("Cross-language phonological neighbours", nd:nd_list) %>% 
    tab_spanner("Phonological similarity", lv:lv_dist) %>% 
    cols_label(
        word_1 = "Presented word (Catalan)",
        word_2 = "Correct translation (Spanish)",
        freq_zipf_2 = str_wrap("Translation lexical frequency (Zipf)", 12),
        lv = "Levenshtein similarity",
        lv_dist = "Levenshtein distance",
        duration = "Audio duration (s)",
        nd = "N",
        nd_list = "Neighbours"
    ) %>% 
    tab_style(
        cell_text(align = "left", weight = "bold"),
        cells_column_spanners()
    ) %>% 
    tab_style(
        cell_text(style = "italic", align = "left"),
        list(cells_column_labels())
    ) %>% 
    tab_style(
        cell_text(align = "left"),
        cells_body()
    ) %>% 
    tab_style(
        cell_text(size = "x-small"),
        cells_body(columns = nd_list, rows = everything())
    )
```
:::



### Lexical frequency

```{r}
#| label: fig-stimuli-freq
stimuli %>% 
    distinct(group, word_1, .keep_all = TRUE) %>% 
    left_join(count(., group, name = "n_total")) %>% 
    mutate(test_language = paste0(group,  " (N = ", n_total, ")")) %>% 
    ggplot(aes(freq_zipf_2, fill = group)) +
    facet_wrap(~group, ncol = 1) +
    geom_histogram(bins = 25, colour = "white") +
    labs(
        x = "Lexical frequency (Zipf score)\nExtracted from CLEARPOND database", 
        y = "# trials", 
        fill = "Group"
    )  +
    scale_y_continuous(breaks = seq(0, 12, 2)) +
    theme(
        legend.position = "none",
        panel.grid.major.y = element_line(colour = "grey", linetype = "dotted")
    )
```


### PTHN

```{r}
#| label: fig-stimuli-pthn
#| fig-height: 10
stimuli %>% 
    left_join(count(., group, name = "n_total")) %>% 
    mutate(
        translation = paste0(word_1, "/", word_2),
        group = paste0(group,  " (N = ", n_total, ")")
    ) %>% 
    ggplot(aes(x = nd, y = reorder(translation, nd), colour = group, fill = group, label = translation)) +
    facet_wrap(~group, scales = "free_y") +
    geom_segment(aes(x = 0, xend = nd, y = reorder(translation, nd), yend = reorder(translation, nd))) +
    geom_point(size = 1) +
    labs(
        x = "# phonological neighbours", 
        y = "Word"
    ) +
    scale_x_continuous(breaks = seq(0, 30, 5)) +
    theme(
        legend.position = "none",
        panel.grid.major.x = element_line(colour = "grey", linetype = "dotted"),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        axis.text.y = element_text(size = 7, hjust = 1)
    )
```


### Levenshtein distance

```{r}
#| label: fig-stimuli-lv
#| fig-width: 9
#| fig-height: 12
stimuli %>% 
    left_join(count(., group, name = "n_total")) %>% 
    mutate(
        group = paste0(group,  " (N = ", n_total, ")"),
        translation = paste(translation, "(", percent(lv, accuracy = 0.01), ")"),
        translation_ord = reorder_within(translation, lv, group)
    ) %>% 
    ggplot() +
    aes(x = lv, y = translation_ord, fill = group, colour = group) +
    facet_wrap(~group, scales = "free_y") +
    geom_segment(aes(x = 0, xend = lv, y = translation_ord, yend = translation_ord)) +
    geom_point(size = 1) +
    labs(
        x = "Group", 
        y = "Phonological Leveshtein distance\n(corrected for string length)",
        fill = "Test language"
    ) +
    scale_x_continuous(labels = percent) +
    scale_y_reordered() +
    theme(
        legend.position = "none",
        axis.title.y = element_blank(),
        axis.text.y = element_text(size = 3, hjust = 1),
        panel.grid.major.x = element_line(colour = "grey", linetype = "dotted")
    ) 
ggsave(here("img", "lv.png"), height = 12)
```


### Distributions

```{r}
#| label: fig-prepare
#| out-width: "100%"
#| fig-width: 7
#| fig-height: 5.5
#| fig-cap: "Distribution and summary statistics of stimuli translations, plotted in different panels for English translations of Catalan stimuli (cat-ENG), English translations of Spanish stimuli (spa-ENG), and Spanish translation of Catalan stimuli (cat-SPA). A\\) Lexical frequency of stimuli translations, expressed in counts per million and as Zipf scores. B\\) Number of higher-frequency phonological neighbourhoods (PTHN) of stimuli translations. C\\) Normalised Levenshtein phonological similarity between the presented stimuli and their translations, expressed in percentages. Lexical frequencies and PTHN scores of the stimuli (presented auditorily in Catalan or Spanish) are not described, as participants lack any lexical representation of such words."
medians <- stimuli %>% 
    select(group, word_1, freq_2, freq_zipf_2, nd, lv) %>% 
    group_by(group) %>% 
    summarise(across(freq_2:lv,list(median = ~median(., na.rm = TRUE),  sd = ~sd(., na.rm = TRUE))))

# frequency
stimuli %>% 
    ggplot() + 
    aes(x = freq_zipf_2, fill = group) + 
    facet_wrap(~group, ncol = 1) + 
    geom_rect(
        data = medians, 
        aes(
            xmin = freq_zipf_2_median-freq_zipf_2_sd,
            xmax = freq_zipf_2_median+freq_zipf_2_sd, 
            ymin = -Inf,
            ymax = Inf, 
            fill = group
        ),
        inherit.aes = FALSE, alpha = 0.15
    ) +   
    geom_histogram(bins = 20, colour = "white") +
    geom_vline(
        data = medians, 
        aes(xintercept = freq_zipf_2_median, group = group), 
        colour = "black", size = 0.5, linetype = "dashed"
    ) + 
    geom_text(
        data = medians, 
        aes(label = "Median ± SD", x = freq_zipf_2_median+1.25, y = 13), 
        size = 3
    ) +
    geom_curve(
        data = medians, 
        aes(x = freq_zipf_2_median+0.85,  xend = freq_zipf_2_median+0.1,
            y = 12, yend = 11),
        arrow = arrow(length = unit(0.2, "cm")),
        curvature = -0.25, colour = "grey30"
    ) +
    labs(
        x = "Lexical frequency (Zipf)", 
        y = "Number of trials", 
        title = "Frequency\n(stimuli translations)\n"
    ) +
    
    # PTHN 1
    stimuli %>% 
    count(group, nd) %>% 
    ggplot(aes(x = nd, y = n, fill = group)) + 
    facet_wrap(~group, ncol = 1) + 
    geom_rect(
        data = medians, 
        aes(xmin = 0, xmax = nd_median+nd_sd, ymin = -Inf, ymax = Inf, fill = group), 
        inherit.aes = FALSE, alpha = 0.15
    ) +   
    geom_col(colour = "white") + 
    geom_vline(
        data = medians, 
        aes(xintercept = nd_median, group = group), 
        colour = "black", size = 0.5, linetype = "dashed") + 
    labs(
        x = "PTHN across languages", 
        y = "Number of trials", 
        title = "Cross-language neighbours"
    ) +
    
    # Levenshtein
    stimuli %>% 
    ggplot(aes(lv, fill = group)) +
    facet_wrap(~group, ncol = 1) + 
    geom_rect(
        data = medians, 
        aes(xmin = 0, xmax = lv_median+lv_sd, ymin = -Inf, ymax = Inf, fill = group),
        inherit.aes = FALSE, alpha = 0.15
    ) +   
    geom_histogram(bins = 20, colour = "white") +
    geom_vline(
        data = medians,
        aes(xintercept = lv_median, group = group), 
        colour = "black", size = 0.5, linetype = "dashed"
    ) + 
    scale_x_continuous(labels = percent) +
    labs(
        x = "Levenshtein",
        y = "Number of trials",
        title = "Phonological similarity\n(stimuli and stimuli translations)\n"
    ) +
    
    plot_layout(guides = "collect", nrow = 1) &
    plot_annotation(tag_levels = "A") &
    scale_fill_manual(values = my_colours, na.translate = FALSE) &
    theme(legend.position = "none")

```


## Participants


```{r}
#| label: participants-coded
#| include: false
participants_coded <- participants %>% 
    mutate(valid_participant = ifelse(valid_participant, "Valid", "Not valid"))
```

We collected data from `r format(as_date(min(participants$date)), "%B %dth %Y")` to `r format(as_date(max(participants$date)), "%B %dth %Y")`. We tested `r length(unique(participants$participant_id))` participants. `r length(unique(participants$participant_id[participants$group=="spa-ENG"]))` were English natives tested in Spanish, `r length(unique(participants$participant_id[participants$group=="cat-ENG"]))` were English natives tested in Catalan, and `r length(unique(participants$participant_id[participants$group=="cat-SPA"]))` were Spanish natives tested in Catalan. `r sum(!participants$valid_participant)` failed to meet all the inclusion criteria and were excluded from further analyses. The final sample comprised data from `r sum(!participants$valid_participant)` participants, `r sum(participants$valid_participant[participants$group=="spa-ENG"])` in the spa-ENG group, `r sum(participants$valid_participant[participants$group=="cat-ENG"])` in the cat-ENG group, and `r sum(participants$valid_participant[participants$group=="cat-SPA"])` in the cat-SPA group.

Participants were included if^[We originally planned to exclude participants that reported any visual impairment that glasses would not correct. This item was phrased as Do you have normal or corrected-to-normal VISION? (Yes/No) in English, and as ¿Tienes problemas de VISIÓN que unas gafas o lentes de contacto NO corrijan? (Sí/No). Surprisingly, the proportion of Spanish participants that reported visual impairment was implausibly large (n = 6, 18.18%). This is possibly due to some participants using glasses daily and not having read the item until the end, where it is indicated that the use of glasses is considered as normal vision]:

* Aged 18 to 25 years
* Did not report being fluent in Catalan, Spanish, or Italian
* Provided at least 80% of the presented trials
* Did not report motor, auditory or visual (other than wearing glasses) problems

Trials were considered valid if:

* Participant did not leave a blank response
* Participant took longer than 10 seconds to respond


### Summary

```{r}
#| label: fig-participants-summary
participants_coded %>% 
    count(group, valid_participant) %>% 
    mutate(valid_participant = factor(valid_participant)) %>% 
    ggplot() +
    aes(group, n, fill = valid_participant, order = n) + 
    geom_col() +
    labs(
        x = "Group", 
        y = "# participants", 
        fill = "Valid?"
    ) +
    theme(
        legend.title = element_blank(),
        legend.position = "top",
        axis.title.x = element_blank(),
        panel.grid.major.y = element_line(linetype = "dotted", colour = "grey")
    )

```

### Valid trials

```{r}
#| label: fig-participants-trials
participants_coded %>% 
    filter(valid_participant=="Valid") %>% 
    select(participant_id, group, n, n_valid) %>%
    mutate(valid_prop = n_valid/n) %>% 
    ggplot() +
    aes(x = valid_prop, fill = group, colour = group) + 
    facet_wrap(~group) +
    geom_histogram() +
    labs(
        x = "Valid trials (%)",
        y = "N participants",
        fill = "Group",
        colour = "Group"
    ) +
    scale_x_continuous(labels = percent) +
    theme(
        legend.title = element_blank(),
        legend.position = "none",
        axis.title.x = element_blank(),
        panel.grid.major.y = element_line(linetype = "dotted", colour = "grey")
    )
```

### Demographic information

```{r}
#| label: fig-participants-demo
participants_valid <- filter(participants_coded, valid_participant=="Valid")

p_sex <- participants_valid %>% 
    left_join(count(participants_valid, group, name = "n_total")) %>% 
    mutate(group = paste0(group,  "\n(N = ", n_total, ")")) %>% 
    ggplot() +
    aes(x = group, fill = sex) +
    geom_bar(position = position_fill()) +
    labs(
        x = "Group", 
        y = "# participants", 
        fill = "Sex"
    ) +
    scale_y_continuous(labels = percent) +
    theme(
        legend.position = "top",
        axis.title.x = element_blank()
    )

p_age <- participants_valid %>% 
    left_join(count(participants_valid, group, name = "n_total")) %>% 
    mutate(group = paste0(group,  " (N = ", n_total, ")")) %>% 
    ggplot(aes(as.factor(age), fill = group, colour = group)) +
    facet_wrap(~group, ncol = 1) +
    geom_bar(colour = "white") +
    labs(
        x = "Age (years)", 
        y = "% participants", 
        fill = "Group", 
        colour = "Group"
    ) +
    theme(legend.position = "none")


(p_sex + p_age) &
    plot_layout() &
    plot_annotation(tag_levels = "A") &
    theme(
        legend.title = element_blank(),
        panel.grid.major.y = element_line(linetype = "dotted", colour = "grey")
    )

```



### Second language

```{r}
#| label: fig-participants-l2
participants_valid %>% 
    count(group, l2, .drop = FALSE) %>% 
    mutate(
        l2 = case_when(
            l2=="Alemã\u0081n" ~ "German",
            l2=="Francã\u2030s" ~ "French",
            l2=="Cuã\u0081l" ~ "Missing",
            TRUE ~ l2
        ),
    ) %>% 
    left_join(count(participants_valid, group, name = "n_total")) %>% 
    mutate(group = paste0(group,  "\n(N = ", n_total, ")")) %>% 
    ggplot() +
    aes(group, n, fill = l2) + 
    facet_wrap(~group, ncol = 1, scales = "free_y") +
    geom_col(position = position_fill()) +
    labs(
        x = "L2", 
        y = "# participants", 
        fill = "L2"
    ) +
    scale_y_continuous(labels = percent) +
    coord_flip() +
    theme(
        legend.position = "top",
        legend.title = element_blank(),
        strip.text = element_blank(),
        panel.grid = element_blank(),
        axis.text.x = element_text(),
        axis.title.y = element_blank()
    )

```


### Language profile proficiency

```{r}
#| label: fig-participants-proficiency
participants_valid %>% 
    select(participant_id, group, catalan_oral, spanish_oral, catalan_written, spanish_written) %>% 
    mutate(across(c(catalan_oral, spanish_oral, catalan_written, spanish_written), replace_na, 0)) %>% 
    pivot_longer(
        c(catalan_oral, spanish_oral, catalan_written, spanish_written),
        names_to = "type",
        values_to = "score"
    ) %>% 
    separate(type, c("language", "modality"), sep = "_") %>% 
    mutate(across(c(language, modality), str_to_sentence)) %>%
    left_join(count(participants_valid, group, name = "n_total")) %>% 
    mutate(group = paste0(group, " (N = ", n_total, ")")) %>% 
    ggplot(aes(as.integer(score), fill = language)) +
    facet_grid(modality~group) +
    geom_bar(position = position_dodge(), colour = "white") +
    labs(
        y = "# participants", 
        x = "Self-reported proficiency (0-5)",
        fill = "Language"
    ) +
    theme(
        legend.position = "top",
        panel.grid.major.y = element_line(colour = "grey", linetype = "dotted")
    )

```


## Data analysis

We fitted a Bayesian multilevel regression model using the R package `brms` [@burkner2017brms], with correct responses (`correct`, 0 is incorrect response, 1 if correct response) as the response variable with a Bernoulli distribution and a logit link function. We modelled the probability of an average participant providing a correct response, conditional to a set of predictors (aka. fixed effects) and their interactions:

* PTHN (`pthn`, 0-Inf): number of phonological neighbours with higher frequency of the target word. Extracted from the CLEARPOND database. Standardised before entering the regression model.
* Phonological similarity (`lv`, 0-1): Inverse Levenshtein distance between the IPA transcription of the presented word and its correct translation in the target language, calculated using the `stringdist` function of the `stringdist` package [@loo2014stringdist]. Standardised before entering the regression model.
* Shared phonological onset (`onset`, Same/Different): Whether the presented and the target word share phonological onset, as judged by experimenters, and sum coded as $Different = -0.5$ and $Same = +0.5$. 

We added participants (`participants`) and as a grouping variable (aka., random effects), therefore adding participant-level adjustments to the model. We specified random intercepts slopes for all fixed effects within the `participant` grouping variable.

We performed multiple imputation via predictive mean matching using the `mice` function of the `mice` package [@van2011mice] to impute missing values in the response variable or the predictors. 

The model was implemented using the following formula (`fit_3`):

$$\begin{align}

&\textbf{Likelihood}  \\
y_{i} \sim& Bernoulli(p_{i}) && \text{[probability of correct translation]} \\ \\

&\textbf{Parameters}  \\

logit(p_{i}) = ~ &  \beta_{0[p,w]} ~ +  && \text{[linear model]}\\
& \beta_{1[p]} ~ Frequency_{i} ~ + \\
& \beta_{2[p]} ~ PTHN_i ~ + \\
& \beta_{3[p]} ~ Similarity_i ~ + \\
& \beta_{4[p]} ~ (PTHN_i \times Similarity_i) \\ \\

\beta_{0-6[p,w]} \sim& ~  \mathcal{N}(\mu_{\beta_{j}}, \sigma_{\beta_{j}}) \text{, for participant } p ~\text{in 1, ..., } P ~\text{and  word } w ~\text{in 1, ..., } W && \text{[participant- and word-level intercepts]} \\
\beta_{1-6[p]} \sim& ~  \mathcal{N}(\mu_{\beta_{j}}, \sigma_{\beta_{j}}) \text{, for participant } p ~\text{in 1, ..., } P
&& \text{[participant-level coefficients]} \\ \\

&\textbf{Prior}  \\

\mu_{\beta_{p,w}} ~ \sim& ~ \mathcal{N}(0, 0.1) && \text{[participant-level coefficients]} \\
\sigma_{\beta_{p}}, ~ \sigma_{\beta_{w}} \sim& ~ HalfCauchy(0, 0.1) && \text{[SD for population and participant]} \\
\rho_{p}, ~ \rho_{w} \sim& ~LKJ(8) && \text{[correlation between participant-level coefficients]} \\


\end{align}$$

The estimation of the model was performed using Bayesian inference via Hamiltonian Monte-Carlo in Stan [@carpenter2017stan], with 4 chains, 2,000 iterations each (1,000 warm-ups iterations). The output of this model is the approximated posterior distribution of all the parameters estimated, therefore indicating the probability of each combination of values of the parameters, conditional to the observed data. 

We compared this (extended model) to other models dropping one predictor at a time using Leave-one-out cross-validation (LOO-CV), using the `loo` and `loo_compare` functions of the `brms` package. We compared our extended model against the following models:

* fit_0: `~ 1 + (1 | participant) + (1 | word)`
* fit_1: `~ 1 + frequency_zipf + (1 + frequency_zipf | participant) + (1 | word)`
* fit_2: `~ 1 + frequency_zipf + pthn + (1 + frequency_zipf + pthn | participant) + (1 | word)`
* fit_3: `~ 1 + frequency_zipf + pthn + lv + (1 + frequency_zipf + pthn + lv | participant) + (1 | word)`
* fit_4: `~ 1 + frequency_zipf + pthn + lv + pthn:lv + (1 + frequency_zipf + pthn + pthn:lv + lv | participant) + (1 | word)`
* fit_5: `~ 1 + frequency_zipf + pthn + lv + pthn:lv + group + (1 + frequency_zipf + pthn + pthn:lv + lv | participant) + (1 | word)`
* fit_6: `~ 1 + frequency_zipf + pthn + lv + pthn:lv + group + group:lv + (1 + frequency_zipf + pthn + pthn:lv + lv | participant) + (1 | word)`



## Results

### Raw data

### Model outputs

```{r}
#| label: responses-coded
responses_coded <- responses %>% 
    # typos are considered correct responses
    mutate(
        group = as.factor(group), 
        # center predictors
        across(c(lv_std, nd_std, freq_zipf_2_std), ~scale(., center = TRUE, scale = TRUE)[,1])
    ) %>% 
    # impute missing data
    as_tibble() %>% 
    arrange(group, word)
```


#### Model comparison

Leave-one-out cross-validation. The more negative is `elpd_diff` (and the larger its magnitude compared to its corresponding standard error), the better it first the data compared to the null model (`~ 1 + (1 | participant)`). The model that fits the data the best is the extended model.


```{r}
#| label: tbl-model-comparison
tab_subtitle <- md("Model performance and comparison using leave-one-out cross-validation")

tab_caption  <- md("*Note*. Outcomes of the leave-one-out cross-validation procedure. Each row indicates the values of the expected log-predicted density (*ELPD*), leave-one-out information creterion (*LOO-IC*), and the difference in *ELPD* (*LOO-diff*) between each model and the inmediately simpler model. Each value is accompanied by a standard error (*SE*) indicating the uncertainty of its estimate.")

model_loos %>% 
    as.data.frame() %>% 
    rownames_to_column("model") %>% 
    arrange(desc(elpd_loo)) %>% 
    select(model, matches("elpd_loo"), matches("looic"), matches("diff") ) %>%
    mutate(
        model = str_replace(model, "fit_", "Model "),
        across(everything(), ~na_if(., 0))
    ) %>% 
    gt(rowname_col = "model") %>% 
    tab_header(title = md("Table 2"), subtitle = tab_subtitle) %>% 
    tab_source_note(tab_caption) %>% 
    fmt_missing(everything(), missing_text = "-") %>% 
    fmt_number(2:7) %>% 
    cols_label(
        model = md("**Model**"),
        looic = md("***LOO<sub>IC</sub>***"),
        se_looic = md("***SE*<sub>IC</sub>**"),
        elpd_loo = md("***LOO<sub>ELPD</sub>***"),
        se_elpd_loo = md("***SE***"),
        elpd_diff = md("***LOO<sub>diff</sub>***"),
        se_diff = md("***SE<sub>diff</sub>***")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", weight = "bold", size = "medium"),
        locations = cells_title(groups = "title")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", size = "medium", style = "italic"),
        locations = cells_title(groups = "subtitle")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", size = "medium"),
        locations = cells_source_notes()
    ) %>% 
    tab_style(
        style = list(
            cell_borders(sides = c("left", "right"), color = "white"),
            cell_text(align = "center")
        ),
        locations = list(
            cells_body(), 
            cells_row_groups(), 
            cells_column_spanners(), 
            cells_stub(),
            cells_source_notes(),
            cells_column_labels(),
            cells_stubhead()
        )
    ) %>% 
    tab_style(
        style = list(
            cell_text(align = "left", size = "medium"), 
            cell_borders(sides = "all", color = "white")
        ),
        locations = list(
            cells_stub(), 
            cells_source_notes()
        )
    ) %>% 
    tab_style(
        style = cell_text(align = "center", size = "medium", weight = "normal", style = "normal"),
        locations = list(
            cells_column_spanners(),
            cells_column_labels()
        )
    ) %>% 
    tab_style(
        style = cell_borders(sides = "all", color = "white"),
        locations = cells_body(columns = 1:7)
    ) %>% 
    tab_style(
        style = cell_borders(sides = "top", color = "white"),
        locations = cells_body(columns = 1:7)
    )
```

```{r}
#| label: fig-model-rocs
model_rocs %>% 
    bind_rows(.id = "model") %>% 
    ggplot(aes(1-specificity, sensitivity, colour = model)) +
    facet_wrap(~model) +
    geom_line(aes(group = .draw), alpha = 0.1) +
    labs(x = "1 - Specificity", y = "Sensitivity", colour = "Model") + 
    scale_y_continuous(labels = percent) +
    scale_x_continuous(labels = percent) +
    theme_custom()

```

#### Regression coefficients

```{r}
#| label: tbl-model-coefs
coefs <- model_parameters$fit_5 %>%
    as_tibble() %>% 
    clean_names() %>% 
    mutate(
        parameter = str_remove(parameter, "b_"),
        across(median:ci_high, ~ifelse(parameter=="(Intercept)", plogis(.), ./4))
    ) %>% 
    select(-ci) 

str_repl <- c(
    "Intercept" = "Intercept",
    "freq_zipf_2_std" = "Frequency [+1 SD]",
    "nd_std" = "Neighbours [+1 SD]",
    "lv_std" = "Levenshtein [+1 SD]",
    "groupeng_spa" = "Group [ENG vs. SPA]",
    "groupeng_spa" = "Group [spa/cat-ENG vs. cat-SPA]",
    "groupcateng_spaeng" = "Group [cat-ENG vs. spa-ENG]",
    "nd_std:lv_std" = "Neigbours \u00d7 Cognateness"
)

tab_caption <- md("Estimated posterior distributions of coefficients in Model 6. A\\) Population-level effects. Distributions indicate the estimated posterior likelihood density of regression coefficients of fixed effects. Credible intervals (*CrI*), represented with increasingly lighter segmentents in the distribution indicate the range of values that contain the true value with 95\\%, 80\\%, and 50\\% probability. Black dots represent the mean of each distribution.")

coefs %>% 
    mutate(
        parameter = factor(parameter, levels = names(str_repl), labels = str_repl),
        across(starts_with("ci_"), ~percent(., accuracy = 0.01)),
        ci = paste("[", ci_low, ", ", ci_high, "]")
    ) %>% 
    select(-starts_with("ci_"), -c(rhat, ess)) %>% 
    relocate(parameter, median, ci, log_bf) %>% 
    gt() %>% 
    fmt_percent(median) %>% 
    fmt_number(log_bf) %>% 
    cols_label(
        parameter = "Predictor",
        median = "Median",
        ci = "95% CrI",
        log_bf = "Log(Bayes Factor)"
    ) %>% 
    tab_source_note(tab_caption) %>% 
    cols_align(align = "right")
```


```{r}
#| label: fig-coefs-fixed
#| fig-height: 7
#| fig-width: 6.5
#| fig-cap: "Estimated posterior distributions of coefficients in Model 4. A\\) Population-level effects. Distributions indicate the estimated posterior likelihood density of regression coefficients of fixed effects. Credible intervals (*CrI*), represented with increasingly lighter segmentents in the distribution indicate the range of values that contain the true value with 95\\%, 80\\%, and 50\\% probability. Black dots represent the mean of each distribution. B\\) Participant\\-level coefficient variability. The model estimated participant\\-level coefficients to account for the dependency between responses from the same participant. Distributions in this panel indicate the estimated variability across coefficients from different participants, expressed as standard deviations (*SD*). C\\) Correlation between participant\\-level effects. The model allowed participant-level coefficients to co\\-vary. This panel represents the Pearson correlations between each pair of coefficients, expressed as the mean of the posterior distribution of each  estimated correlation."
coefs <- fixef(fit_4) %>% 
    as.data.frame() %>% 
    rownames_to_column("variable") %>% 
    clean_names() %>% 
    mutate(across(estimate:q97_5, ~logit_to_prob(., variable))) %>%
    group_split(variable) %>% 
    set_names(make_clean_names(map(., "variable"))) %>% 
    map(select, -variable) %>% 
    map(unlist)

post_draws <-  gather_draws(fit_4, `b_.*`, `sd_.*`, regex = TRUE) 

# fixed effects
post_draws %>% 
    filter(str_detect(.variable, "b_")) %>% 
    mutate(
        .variable_name = factor(
            gsub("b_", "", .variable),
            levels = names(str_repl),
            labels = str_repl
        ),
        .value = logit_to_prob(.value, .variable)
    ) %>% 
    arrange(.variable) %>% 
    ggplot() +
    aes(.value, fct_rev(.variable_name)) +
    geom_vline(xintercept = 0) +
    stat_slab(fill = my_colours[1], colour = my_colours[1]) +
    stat_pointinterval() +
    scale_fill_manual(values = my_colours, na.translate = FALSE) +
    scale_x_continuous(labels = function(x) percent(round(x, 1))) +
    labs(
        x = "P(Correct)", 
        y = "Posterior probability density",
        fill = "CrI"
    ) +
    theme(
        legend.position = c(1, 0.25),
        legend.direction = "vertical",
        legend.background = element_rect(fill = "grey95"),
        legend.key = element_rect(fill = "grey95", colour = "grey95"), 
        legend.key.height = unit(0.1, "cm"),
        axis.title.y = element_blank(),
        legend.text = element_text(size = 7),
        axis.text.x = element_text(colour = "black"),
        axis.text.y = element_text(colour = "black", hjust = 1),
        axis.ticks.y = element_blank(),
        panel.grid.major.y = element_line(colour = "grey", size = 0.5)
    ) 
```


#### Marginal effects

```{r}
#| label: fig-marginal-effects
#| fig-width: 7
#| fig-height: 3.5
#| fig-cap: "Expected mean posterior predictions from Model 4. A) Population-level predictions: the X-axis and the Y-axis represent the PTHN score (in standard deviations from the mean) and the probability of correct translation, respectively. We simulated 300 observations from the posterior distribution of the model: 100 simulations for translations with no similarity (0% Levenshtein), 100 simulations for translations with mean accuracy (20.51% Levenshtein), and 100 simulations for translations with the maximum observed accuracy (83.33% Levenshtein). We did this across the range of values of the PTHN scores. For each simulation, we drew a single sample from the posterior distribution of each coefficient. Each simulation is depicted in the graph as a line: pink for minimum similarity translations, blue for hight similarity translations, and yellow for maximum similarity translations. Black, thick lines indicate the expected mean value of the posterior predictions of the model for each condition. The dispersion of the lines indicates the uncertainty of our predictions. We computed these posterior predictions for each group of participants, and plot tem in separate panels."
rescale_values <- function(x, vct) (x*sd(vct))+mean(vct)
scale_values <- function(x, vct) (x-mean(vct))/sd(vct)

nd <- expand.grid(
    lv_std = seq(
        min(fit_4$data$lv_std, na.rm = TRUE),
        max(fit_4$data$lv_std, na.rm = TRUE),
        by = 0.1
    ),
    freq_zipf_2_std = 0,
    nd_std = scale_values(c(0, 3, 6), fit_4$data$nd)
)

m <- add_epred_draws(nd, fit_4, re_formula = NA, ndraws = 50) %>% 
    mutate(
        nd_lab = rescale_values(nd_std, fit_4$data$nd) %>% 
            paste0(" neighbours") %>% 
            factor(levels = paste0(c(0, 3, 6), " neighbours"))
    )

ggplot(m, aes(x = lv_std, y = .epred)) +
    facet_wrap(~nd_lab, nrow = 1) +
    geom_line(aes(group = interaction(nd_std, .draw)),
              colour = my_colours[1], size = 0.75, alpha = 0.1) +
    geom_hline(yintercept = 0.5, colour = "grey", size = 1) +
    stat_summary(fun = mean, geom = "line", size = 1, colour = my_colours[1]) +
    labs(
        x = "Phonological similarity (Levenshtein)",
        y = "P(Correct)",
        title = "Population-level posterior predictions"
    ) +
    scale_y_continuous(labels = percent) +
    theme(
        legend.position = "none",
        axis.text.x = element_text(size = 10),
        plot.title = element_blank()
    )
```





# Study 2

## Participants

### Language condition

```{r}
#| label: participants-language
#| warning: false
# participants language condition
questionnaire_participants %>% 
    count(language) %>% 
    ggplot(aes(language, n, colour = language, fill = language, label = n)) +
    geom_col(position = position_dodge()) +
    geom_text(aes(y = n+2), position = position_dodge(width = 1), size = 4, show.legend = FALSE, hjust = 0.5) +
    labs(x = "Educational attainment", y = "# participants", colour = "Language", fill = "Language") +
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    theme_custom() +
    theme(legend.position = "none")

```


## Age

```{r}
#| label: participants-age
#| warning: false
questionnaire_participants %>% 
    count(age, language) %>% 
    ggplot(aes(age, n, colour = language, fill = language, label = n)) +
    facet_wrap(~language) +
    geom_col() +
    geom_text(aes(y = n+0.5), position = position_dodge(width = 1), size = 4, show.legend = FALSE, hjust = 0.5) +
    labs(x = "Age (years)", y = "# participants", colour = "Language", fill = "Language") +
    scale_y_continuous(breaks = 0:10) +
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    theme_custom() +
    theme(legend.position = "top")
```

## Gender

```{r}
#| label: participants-gender
#| warning: false
questionnaire_participants %>% 
    count(language, sex) %>% 
    ggplot(aes(sex, n, colour = language, fill = language, label = n)) +
    geom_col(position = position_dodge()) +
    geom_text(aes(y = n+1), position = position_dodge(width = 1), size = 4, show.legend = FALSE, hjust = 0.5) +
    labs(x = "Gender", y = "# participants", colour = "Language", fill = "Language") +
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    theme_custom() +
    theme(legend.position = "top")
```

### Educational attainment

```{r}
#| label: participants-education
#| warning: false
questionnaire_participants %>% 
    count(language, education) %>% 
    mutate(education = str_wrap(education, width = 23)) %>% 
    ggplot(aes(education, n, colour = language, fill = language, label = n)) +
    geom_col(position = position_dodge()) +
    geom_text(aes(y = n+1), position = position_dodge(width = 1), size = 4, show.legend = FALSE, hjust = 0.5) +
    labs(x = "Educational attainment", y = "# participants", colour = "Language", fill = "Language") +
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    theme_custom() 
```

### Language profile

```{r}
#| label: participants-profile
#| warning: false
questionnaire_participants %>% 
    pivot_longer(c(l_1, l_2, l_3), names_to = "language_number", values_to = "language_response") %>% 
    count(language, language_number, language_response) %>% 
    ggplot(aes(reorder(language_response, -n), n, colour = language, fill = language, label = n)) +
    facet_wrap(~language_number) +
    geom_col(position = position_dodge()) +
    geom_text(aes(y = n+1), position = position_dodge(width = 1), size = 4, show.legend = FALSE, hjust = 0.5) +
    labs(x = "Familiar languages", y = "# participants", colour = "Language", fill = "Language") +
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    theme_custom() +
    theme(
        legend.position = "top",
        axis.text.x = element_text(angle = 30, hjust = 1)
    )
```

### Number of trials

```{r}
#| label: participants-trials
#| warning: false
questionnaire_participants %>% 
    count(language, num_trials) %>% 
    mutate(num_trials = as.factor(num_trials)) %>% 
    ggplot(aes(num_trials, n, colour = language, fill = language, label = n)) +
    geom_col(position = position_dodge()) +
    geom_text(aes(y = n+1), position = position_dodge(width = 1), size = 4, show.legend = FALSE, hjust = 0.5) +
    labs(x = "Completed trials", y = "# participants", colour = "Language", fill = "Language") +
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    theme_custom() +
    theme(
        legend.position = "top"
    )
```

## Results

### Raw data

#### The relationship between confidence and knowledge

```{r}
#| label: fig-confidence-knowledge
#| warning: false
#| fig-height: 6

# plot confidence ratings by knowledge
questionnaire_responses %>% 
    left_join(select(questionnaire_data_clean, participant_id, word_1, knowledge, confidence)) %>% 
    count(knowledge, confidence, group) %>% 
    replace_na(list(n = 0)) %>% 
    ggplot(aes(confidence, n, fill = knowledge, colour = knowledge, label = format(n, big.mark = ","))) +
    facet_wrap(~group) +
    geom_col(position = position_dodge(width = 1), show.legend = FALSE) +
    geom_text(aes(y = n+70), position = position_dodge(width = 1), size = 3, show.legend = FALSE, hjust = 0.5) +
    scale_y_continuous(labels = ~format(., big.mark = ",")) +
    theme(
        axis.title.x = element_blank()
    ) +
    
    questionnaire_responses %>%  
    left_join(select(questionnaire_data_clean, participant_id, word_1, knowledge, confidence)) %>% 
    count(knowledge, confidence, group) %>% 
    
    ggplot(aes(confidence, n, fill = knowledge, colour = knowledge, label = n)) +
    facet_wrap(~group) +
    geom_col(position = position_fill()) +
    scale_y_continuous(labels = percent) +
    
    plot_layout(nrow = 2) &
    labs(x = "Confidence rating", y = "Responses", colour = "Knows the word", fill = "Knows the word") &
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) &
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) &
    scale_x_continuous(breaks = 0:7) &
    theme_custom() &
    theme(legend.position = "top")
```


#### Participant-level accuracy

```{r}
#| label: results-participant-accuracy
#| warning: false
#| fig-height: 7
# plot participant accuracy
questionnaire_responses %>% 
    group_by(participant_id, group) %>% 
    summarise(
        sum_correct = sum(correct),
        num_trials = n(),
        .groups = "drop"
    ) %>% 
    mutate(
        prop = sum_correct/num_trials,
        prop_se = prop_adj_se(sum_correct, num_trials)
    ) %>% 
    ggplot(aes(prop, reorder(participant_id, prop), colour = group)) +
    facet_wrap(~group, scales = "free_y") + 
    geom_errorbar(aes(xmin = prop-prop_se, xmax = prop+prop_se), width = 0.5) +
    geom_point() +
    labs(x = "Proportion of correct translations", y = "Participant", colour = "Language") +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    scale_x_continuous(labels = percent) +
    theme_custom() +
    theme(
        legend.position = "top",
        panel.grid.major.x = element_line(colour = "grey", linetype = "dotted"),
        axis.text.y = element_text(size = 7, hjust = 1),
        axis.ticks.y = element_blank()
    )
```


#### Word-level accuracy

```{r}
#| label: results-word-accuracy
#| warning: false
#| fig-height: 10
# plot word accuracy
questionnaire_responses %>% 
    group_by(word_1, group) %>% 
    summarise(
        sum_correct = sum(correct),
        num_trials = n(),
        .groups = "drop"
    ) %>% 
    mutate(
        prop = sum_correct/num_trials,
        prop_se = prop_adj_se(sum_correct, num_trials)
    ) %>% 
    ggplot(aes(prop, reorder_within(word_1, prop, group), colour = group)) +
    facet_wrap(~group, scales = "free_y") +
    geom_errorbar(aes(xmin = prop-prop_se, xmax = prop+prop_se), width = 0.5) +
    geom_point() +
    labs(x = "Proportion of correct translations", y = "Word", colour = "Language") +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    scale_x_continuous(labels = percent) +
    scale_y_reordered() +
    theme_custom() +
    theme(
        legend.position = "top",
        axis.text.y = element_text(size = 7, hjust = 1),
        panel.grid.major.x = element_line(colour = "grey", linetype = "dotted"),
        axis.ticks.y = element_blank()
    )
```

#### Accuracy by confidence and knowledge

```{r}
#| label: results-accuracy-confidence
#| warning: false
# plot response confidence
questionnaire_responses %>%
    mutate(correct = as.integer(correct)) %>% 
    ggplot(aes(confidence, correct, colour = group, fill = group)) +
    facet_grid(~knowledge, labeller = label_both) +
    geom_point(
        position = position_jitterdodge(jitter.width = 0.15, jitter.height = 0.1, dodge.width = 0.3),
        alpha = 0.25, size = 0.5
    ) +
    geom_smooth(method = "glm", method.args = list(family = "binomial")) +
    labs(x = "Confidence", y = "P(correct)", colour = "Language", fill = "Language") +
    scale_colour_manual(values = c("#1A85FF", "#ff2976")) +
    scale_fill_manual(values = c("#1A85FF", "#ff2976")) +
    scale_x_continuous(breaks = 0:7) +
    scale_y_continuous(labels = percent, breaks = seq(0, 1, 0.25)) +
    theme_custom() +
    theme(
        legend.position = "top"
    )
```


### Model outputs

#### Model comparisons

Leave-one-out cross-validation. The more negative is `elpd_diff` (and the larger its magnitude compared to its corresponding standard error), the better it first the data compared to the null model (`~ 1 + (1 | participant)`). The model that fits the data the best is the extended model.


```{r}
#| label: tbl-model-comparison-2
tab_subtitle <- md("Model performance and comparison using leave-one-out cross-validation")

tab_caption  <- md("*Note*. Outcomes of the leave-one-out cross-validation procedure. Each row indicates the values of the expected log-predicted density (*ELPD*), leave-one-out information creterion (*LOO-IC*), and the difference in *ELPD* (*LOO-diff*) between each model and the inmediately simpler model. Each value is accompanied by a standard error (*SE*) indicating the uncertainty of its estimate.")

questionnaire_model_loos %>% 
    as.data.frame() %>% 
    rownames_to_column("model") %>% 
    arrange(desc(elpd_loo)) %>% 
    select(model, matches("elpd_loo"), matches("looic"), matches("diff") ) %>%
    mutate(
        model = str_replace(model, "questionnaire_fit_", "Model "),
        across(everything(), ~na_if(., 0))
    ) %>% 
    gt(rowname_col = "model") %>% 
    tab_header(title = md("Table 2"), subtitle = tab_subtitle) %>% 
    tab_source_note(tab_caption) %>% 
    fmt_missing(everything(), missing_text = "-") %>% 
    fmt_number(2:7) %>% 
    cols_label(
        model = md("**Model**"),
        looic = md("***LOO<sub>IC</sub>***"),
        se_looic = md("***SE*<sub>IC</sub>**"),
        elpd_loo = md("***LOO<sub>ELPD</sub>***"),
        se_elpd_loo = md("***SE***"),
        elpd_diff = md("***LOO<sub>diff</sub>***"),
        se_diff = md("***SE<sub>diff</sub>***")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", weight = "bold", size = "medium"),
        locations = cells_title(groups = "title")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", size = "medium", style = "italic"),
        locations = cells_title(groups = "subtitle")
    ) %>% 
    tab_style(
        style = cell_text(align = "left", size = "medium"),
        locations = cells_source_notes()
    ) %>% 
    tab_style(
        style = list(
            cell_borders(sides = c("left", "right"), color = "white"),
            cell_text(align = "center")
        ),
        locations = list(
            cells_body(), 
            cells_row_groups(), 
            cells_column_spanners(), 
            cells_stub(),
            cells_source_notes(),
            cells_column_labels(),
            cells_stubhead()
        )
    ) %>% 
    tab_style(
        style = list(
            cell_text(align = "left", size = "medium"), 
            cell_borders(sides = "all", color = "white")
        ),
        locations = list(
            cells_stub(), 
            cells_source_notes()
        )
    ) %>% 
    tab_style(
        style = cell_text(align = "center", size = "medium", weight = "normal", style = "normal"),
        locations = list(
            cells_column_spanners(),
            cells_column_labels()
        )
    ) %>% 
    tab_style(
        style = cell_borders(sides = "all", color = "white"),
        locations = cells_body(columns = 1:7)
    ) %>% 
    tab_style(
        style = cell_borders(sides = "top", color = "white"),
        locations = cells_body(columns = 1:7)
    )
```


```{r}
#| label: fig-questionnaire-model-rocs
questionnaire_model_rocs %>% 
    bind_rows(.id = "model") %>% 
    ggplot(aes(1-specificity, sensitivity, colour = model)) +
    facet_wrap(~model) +
    geom_line(aes(group = .draw), alpha = 0.1) +
    labs(x = "1 - Specificity", y = "Sensitivity", colour = "Model") + 
    scale_y_continuous(labels = percent) +
    scale_x_continuous(labels = percent) +
    theme_custom()

```

#### Regression coefficients

```{r}
#| label: tbl-questionnaire-model-coefs
#| warning: false
questionnaire_coefs <- fixef(questionnaire_fit_4) %>% 
    as.data.frame() %>% 
    rownames_to_column("variable") %>% 
    clean_names() %>% 
    mutate(across(estimate:q97_5, ~ifelse(variable=="Intercept", plogis(.), ./4)))

tab_caption <- md("Estimated posterior distributions of coefficients in Model 6. A\\) Population-level effects. Distributions indicate the estimated posterior likelihood density of regression coefficients of fixed effects. Credible intervals (*CrI*), represented with increasingly lighter segmentents in the distribution indicate the range of values that contain the true value with 95\\%, 80\\%, and 50\\% probability. Black dots represent the mean of each distribution.")

questionnaire_coefs %>% 
    mutate(
        variable = variable %>% 
            str_remove("b_") %>% 
            factor(levels = names(str_repl), labels = str_repl)
    ) %>% 
    select(-est_error) %>% 
    gt() %>% 
    fmt_percent(2:4) %>% 
    cols_merge(c("q2_5", "q97_5"), pattern = "[{1}, {2}]") %>% 
    cols_label(
        variable = md("**Predictor**"),
        estimate = md("**Mean**"),
        q2_5 = md("**95\\% CrI**"),
    ) %>% 
    tab_source_note(tab_caption) %>% 
    cols_align(align = "left")
```


```{r}
#| label: fig-questionnaire-coefs-fixed
#| fig-height: 7
#| fig-width: 6.5
#| fig-cap: "Estimated posterior distributions of coefficients in Model 4. A\\) Population-level effects. Distributions indicate the estimated posterior likelihood density of regression coefficients of fixed effects. Credible intervals (*CrI*), represented with increasingly lighter segmentents in the distribution indicate the range of values that contain the true value with 95\\%, 80\\%, and 50\\% probability. Black dots represent the mean of each distribution. B\\) Participant\\-level coefficient variability. The model estimated participant\\-level coefficients to account for the dependency between responses from the same participant. Distributions in this panel indicate the estimated variability across coefficients from different participants, expressed as standard deviations (*SD*). C\\) Correlation between participant\\-level effects. The model allowed participant-level coefficients to co\\-vary. This panel represents the Pearson correlations between each pair of coefficients, expressed as the mean of the posterior distribution of each  estimated correlation."
coefs <- fixef(questionnaire_fit_4) %>% 
    as.data.frame() %>% 
    rownames_to_column("variable") %>% 
    clean_names() %>% 
    mutate(across(estimate:q97_5, ~ifelse(variable=="Intercept", inv_logit_scaled(.), ./4))) %>%
    group_split(variable) %>% 
    set_names(make_clean_names(map(., "variable"))) %>% 
    map(select, -variable) %>% 
    map(unlist)

questionnaire_post_draws <- gather_draws(questionnaire_fit_4, `b_.*`, `sd_.*`, regex = TRUE) 

# fixed effects
questionnaire_post_draws %>% 
    filter(str_detect(.variable, "b_")) %>% 
    mutate(
        .variable_name = .variable %>% 
            str_remove("b_") %>% 
            factor(levels = names(str_repl), labels = str_repl),
        .value = ifelse(str_detect(.variable, "Intercept"), inv_logit_scaled(.value), .value/4)
    ) %>% 
    arrange(.variable) %>% 
    ggplot() +
    aes(.value, fct_rev(.variable_name)) +
    geom_vline(xintercept = 0, size = 1, colour = "grey") +
    stat_slab(fill = my_colours[1], colour = my_colours[1]) +
    stat_pointinterval() +
    labs(
        x = "P(Correct)", 
        y = "Posterior probability density",
        fill = "CrI"
    ) +
    scale_x_continuous(labels = function(x) percent(round(x, 1)), breaks = seq(-0.1, 0.5, 0.1)) +
    theme(
        axis.title.y = element_blank(),
        axis.text = element_text(colour = "black", hjust = 1, size = 12),
        axis.line = element_line(size = 0.75),
        panel.grid.major.x = element_line(colour = "grey", linetype = "dotted"),
        axis.ticks.y = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank()
        
    ) 
```

#### Marginal effects

```{r}
#| label: questionnaire-marginal-effects
#| fig-width: 7
#| fig-height: 3.5
#| fig-cap: "Expected mean posterior predictions from Model 4. A) Population-level predictions: the X-axis and the Y-axis represent the PTHN score (in standard deviations from the mean) and the probability of correct translation, respectively. We simulated 300 observations from the posterior distribution of the model: 100 simulations for translations with no similarity (0% Levenshtein), 100 simulations for translations with mean accuracy (20.51% Levenshtein), and 100 simulations for translations with the maximum observed accuracy (83.33% Levenshtein). We did this across the range of values of the PTHN scores. For each simulation, we drew a single sample from the posterior distribution of each coefficient. Each simulation is depicted in the graph as a line: pink for minimum similarity translations, blue for hight similarity translations, and yellow for maximum similarity translations. Black, thick lines indicate the expected mean value of the posterior predictions of the model for each condition. The dispersion of the lines indicates the uncertainty of our predictions. We computed these posterior predictions for each group of participants, and plot tem in separate panels."
questionnaire_nd <- expand.grid(
    lv_std = seq(
        min(questionnaire_fit_4$data$lv_std, na.rm = TRUE),
        max(questionnaire_fit_4$data$lv_std, na.rm = TRUE),
        by = 0.1
    ),
    freq_zipf_2_std = 0,
    nd_std = scale_values(c(0, 3, 6), questionnaire_fit_4$data$nd)
)

questionnaire_m <- add_epred_draws(
    questionnaire_nd,
    questionnaire_fit_4, 
    re_formula = NA,
    ndraws = 50
) %>% 
    mutate(
        nd_lab = rescale_values(nd_std, questionnaire_fit_4$data$nd) %>% 
            round(2) %>% 
            paste0(" neighbours") %>% 
            factor(levels = paste0(c(0, 3, 6), " neighbours"))
    )

ggplot(questionnaire_m, aes(x = lv_std, y = .epred)) +
    facet_wrap(~nd_lab, nrow = 1) +
    geom_line(aes(group = interaction(nd_std, .draw)),
              colour = my_colours[2], size = 0.75, alpha = 0.1) +
    geom_hline(yintercept = 0.5, colour = "grey", size = 1) +
    stat_summary(fun = mean, geom = "line", size = 1, colour = my_colours[2]) +
    labs(
        x = "Phonological similarity (Levenshtein)",
        y = "P(Correct)",
        title = "Population-level posterior predictions"
    ) +
    scale_y_continuous(labels = percent) +
    theme(
        legend.position = "none",
        axis.text.x = element_text(size = 10),
        plot.title = element_blank()
    )
```

# Joint analyses

## Regression coefficients

```{r}
#| label: fig-joint-coefs
#| fig-height: 5
#| fig-width: 8.5
#| fig-cap: "Estimated posterior distributions of coefficients in Model 4. A\\) Population-level effects. Distributions indicate the estimated posterior likelihood density of regression coefficients of fixed effects. Credible intervals (*CrI*), represented with increasingly lighter segmentents in the distribution indicate the range of values that contain the true value with 95\\%, 80\\%, and 50\\% probability. Black dots represent the mean of each distribution. B\\) Participant\\-level coefficient variability. The model estimated participant\\-level coefficients to account for the dependency between responses from the same participant. Distributions in this panel indicate the estimated variability across coefficients from different participants, expressed as standard deviations (*SD*). C\\) Correlation between participant\\-level effects. The model allowed participant-level coefficients to co\\-vary. This panel represents the Pearson correlations between each pair of coefficients, expressed as the mean of the posterior distribution of each  estimated correlation."
# fixed effects
list("Study 1" = post_draws, "Study 2" = questionnaire_post_draws) %>% 
    bind_rows(.id = "study") %>% 
    filter(str_detect(.variable, "b_")) %>% 
    mutate(
        .variable_name = factor(
            gsub("b_", "", .variable),
            levels = names(str_repl),
            labels = str_repl
        ),
        .value = logit_to_prob(.value, .variable)
    ) %>% 
    arrange(.variable) %>% 
    ggplot(aes(.value, fct_rev(.variable_name), fill = study, colour = study)) +
    stat_slab(size = 1.25, position = position_nudge(y = 0.15), fill = NA, scale = 0.5) +
    stat_pointinterval(position = position_dodge(width = 0.25), .width = 0.95, size = 1.35) +
    scale_fill_manual(values = my_colours, na.translate = FALSE) +
    scale_x_continuous(labels = ~percent(., accuracy = 1), breaks = seq(-1, 1, 0.1)) +
    labs(
        x = "P(Correct)", 
        y = "Posterior probability density",
        fill = "Study",
        colour = "Study"
    ) +
    theme(
        legend.position = "top",
        legend.title = element_blank(),
        axis.title.y = element_blank(),
        axis.text = element_text(colour = "black", hjust = 1, size = 12),
        axis.ticks.y = element_blank(),
        panel.grid.major.x = element_line(colour = "grey", size = 0.5, linetype = "dotted")
    ) 

```


## Marginal effects

### Population-level marginal effects

```{r}
#| label: fig-joint-marginal-effects
#| fig-width: 9
#| fig-height: 4
#| fig-cap: "Expected mean posterior predictions from Model 4. A) Population-level predictions: the X-axis and the Y-axis represent the PTHN score (in standard deviations from the mean) and the probability of correct translation, respectively. We simulated 300 observations from the posterior distribution of the model: 100 simulations for translations with no similarity (0% Levenshtein), 100 simulations for translations with mean accuracy (20.51% Levenshtein), and 100 simulations for translations with the maximum observed accuracy (83.33% Levenshtein). We did this across the range of values of the PTHN scores. For each simulation, we drew a single sample from the posterior distribution of each coefficient. Each simulation is depicted in the graph as a line: pink for minimum similarity translations, blue for hight similarity translations, and yellow for maximum similarity translations. Black, thick lines indicate the expected mean value of the posterior predictions of the model for each condition. The dispersion of the lines indicates the uncertainty of our predictions. We computed these posterior predictions for each group of participants, and plot tem in separate panels."
#| warnings: false
#| messages: false
bind_rows(list("Study 1" = m, "Study 2" = questionnaire_m), .id = "study") %>% 
    ggplot(aes(x = lv_std, y = .epred, colour = study)) +
    facet_wrap(~nd_lab, nrow = 1) +
    geom_line(aes(group = interaction(nd_std, .draw, study)),
              size = 0.75, alpha = 0.1) +
    geom_hline(yintercept = 0.5, size = 1) +
    stat_summary(fun = mean, geom = "line", size = 1) +
    labs(
        x = "Phonological similarity (Levenshtein)",
        y = "P(Correct)",
        title = "Population-level posterior predictions"
    ) +
    scale_y_continuous(labels = percent) +
    theme(
        legend.position = "none",
        plot.title = element_blank()
    )
```


### Group-level marginal effects

#### Word-level marginal effects

::: {.panel-tabset}

##### Catalan to English (cat-ENG)

```{r}
#| label: fig-coefs-word-cateng
#| fig-cap: "Word-level model posterior predicted and observed mean accuracy. Intervals represent the 95% posterior credible interval of the accuracy each item was responded to in Study 1 (blue) and Study 2 (red). dots indicate the observed proportion of participants that translated the word correctly."
#| fig-height: 13
#| fig-width: 5
#| warnings: false
#| messages: false
empirical_means <- list("Study 1" = responses, "Study 2" = questionnaire_responses) %>% 
    bind_rows(.id = "study") %>% 
    group_by(study, group) %>% 
    summarise(successes = sum(correct, na.rm = TRUE), n = n(), .groups = "drop") %>% 
    mutate(
        prop = prop_adj(successes, n),
        prop_se = prop_adj_se(successes, n)
    )

empirical_accuracy <- list("Study 1" = responses, "Study 2" = questionnaire_responses) %>% 
    bind_rows(.id = "study") %>% 
    mutate(translation = paste0(translation, " (", percent(lv, accuracy = 1), ")")) %>% 
    group_by(study, group, translation, lv) %>% 
    summarise(prop = mean(correct), .groups = "drop")

nd_re_words <- expand.grid(
    translation_id = unique(fit_4$data$translation_id),
    nd_std = 0,
    freq_zipf_2_std = 0,
    lv_std = 0,
    group = NA
)

questionnaire_nd_re_words <- expand.grid(
    translation_id = unique(questionnaire_fit_4$data$translation_id),
    nd_std = 0,
    freq_zipf_2_std = 0,
    lv_std = 0,
    group = NA
)

post_re <- add_epred_draws(nd_re_words, fit_4, ndraws = 50, re_formula = ~ (1 | translation_id))
questionnaire_post_re <- add_epred_draws(questionnaire_nd_re_words, questionnaire_fit_4, ndraws = 50, re_formula = ~ (1 | translation_id))

post_re_join <- list("Study 1" = post_re, "Study 2" = questionnaire_post_re) %>% 
    bind_rows(.id = "study") %>% 
    group_by(study, translation_id, nd_std, freq_zipf_2_std, lv_std, group) %>% 
    summarise(
        .mean = mean_qi(.epred)[,1], 
        .lower = mean_qi(.epred)[,2],
        .upper = mean_qi(.epred)[,3],
        .groups = "drop"
    ) %>% 
    ungroup() %>% 
    select(-c(group)) %>% 
    left_join(select(stimuli, group, translation, translation_id, lv)) %>% 
    mutate(
        translation = paste0(translation, " (", percent(lv, accuracy = 1), ")"),
        translation_ord = reorder_within(translation, lv, group),
        group = factor(group, levels = c("cat-ENG", "spa-ENG", "cat-SPA"), ordered = TRUE)
    ) %>% 
    left_join(select(empirical_accuracy, study, group, translation, prop)) 

post_re_join %>% 
    filter(group=="cat-ENG") %>% 
    ggplot(aes(x = .mean, y = translation_ord, colour = study, fill = study)) +
    geom_errorbar(aes(xmin = .lower, xmax = .upper),
                  size = 0.5, width = 0,
                  position = position_dodge(width = 0.5)) + 
    geom_point(aes(x = prop), size = 2, shape = 18,
               position = position_dodge(width = 0.5)) +
    geom_smooth(aes(group = study), orientation = "y", alpha = 0.1, size = 0.5,
                method = "glm", method.args = list(family = "binomial")) +
    labs(
        x = "Percentage of correct responses",
        y = "Item",
        colour = "Study",
        fill = "Study"
    ) +
    scale_x_continuous(limits = c(0, 1), labels = percent) +
    scale_y_reordered() +
    theme(
        legend.position = "top",
        legend.key = element_rect(fill = NA, colour = NA),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 5, hjust = 1),
        axis.ticks = element_blank(),
        axis.title = element_text(size = 10),
        axis.title.y = element_blank(),
        panel.grid.major.x = element_line(size = 0.15, linetype = "dotted", colour = "grey"),
        plot.caption.position = "plot",
        plot.caption = element_text(size = 9, hjust = 0, face = "plain", margin = margin(t = unit(3, "cm"))),
        plot.title.position = "plot",
        plot.title = element_text(hjust = 0, size = 13),
        plot.subtitle = element_text(hjust = 0, face = "plain", size = 13)
    )
```

##### Spanish to English (spa-ENG)

```{r}
#| label: fig-coefs-word-spaeng
#| fig-cap: "Word-level model posterior predicted and observed mean accuracy. Intervals represent the 95% posterior credible interval of the accuracy each item was responded to in Study 1 (blue) and Study 2 (red). dots indicate the observed proportion of participants that translated the word correctly."
#| fig-height: 13
#| fig-width: 5
#| warnings: false
#| messages: false
post_re_join %>% 
    filter(group=="spa-ENG") %>% 
    ggplot(aes(x = .mean, y = translation_ord, colour = study, fill = study)) +
    geom_errorbar(aes(xmin = .lower, xmax = .upper),
                  size = 0.75, width = 0,
                  position = position_dodge(width = 0.5)) + 
    geom_point(aes(x = prop), size = 1.25, shape = 18,
               position = position_dodge(width = 0.5)) +
    geom_smooth(aes(group = study), orientation = "y", alpha = 0.1, size = 0.5,
                method = "glm", method.args = list(family = "binomial")) +
    labs(
        x = "Percentage of correct responses",
        y = "Item",
        colour = "Study",
        fill = "Study"
    ) +
    scale_x_continuous(limits = c(0, 1), labels = percent) +
    scale_y_reordered() +
    theme(
        legend.position = "top",
        legend.key = element_rect(fill = NA, colour = NA),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 5, hjust = 1),
        axis.ticks = element_blank(),
        axis.title = element_text(size = 10),
        axis.title.y = element_blank(),
        panel.grid.major.x = element_line(size = 0.15, linetype = "dotted", colour = "grey"),
        plot.caption.position = "plot",
        plot.caption = element_text(size = 9, hjust = 0, face = "plain", margin = margin(t = unit(3, "cm"))),
        plot.title.position = "plot",
        plot.title = element_text(hjust = 0, size = 13),
        plot.subtitle = element_text(hjust = 0, face = "plain", size = 13)
    )
```

##### Catalan to Spanish (cat-SPA)

```{r}
#| label: fig-coefs-word-catspa
#| fig-cap: "Word-level model posterior predicted and observed mean accuracy. Intervals represent the 95% posterior credible interval of the accuracy each item was responded to in Study 1 (blue) and Study 2 (red). dots indicate the observed proportion of participants that translated the word correctly."
#| fig-height: 13
#| fig-width: 5
#| warnings: false
#| messages: false
post_re_join %>% 
    filter(group=="spa-ENG") %>% 
    ggplot(aes(x = .mean, y = translation_ord, colour = study, fill = study)) +
    geom_errorbar(aes(xmin = .lower, xmax = .upper),
                  size = 0.75, width = 0,
                  position = position_dodge(width = 0.5)) + 
    geom_point(aes(x = prop), size = 1.25, shape = 18,
               position = position_dodge(width = 0.5)) +
    geom_smooth(aes(group = study), orientation = "y", alpha = 0.1, size = 0.5,
                method = "glm", method.args = list(family = binomial)) +
    labs(
        x = "Percentage of correct responses",
        y = "Item",
        colour = "Study",
        fill = "Study"
    ) +
    scale_x_continuous(limits = c(0, 1), labels = percent) +
    scale_y_reordered() +
    theme(
        legend.position = "top",
        legend.key = element_rect(fill = NA, colour = NA),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 5, hjust = 1),
        axis.ticks = element_blank(),
        axis.title = element_text(size = 10),
        axis.title.y = element_blank(),
        panel.grid.major.x = element_line(size = 0.15, linetype = "dotted", colour = "grey"),
        plot.caption.position = "plot",
        plot.caption = element_text(size = 9, hjust = 0, face = "plain", margin = margin(t = unit(3, "cm"))),
        plot.title.position = "plot",
        plot.title = element_text(hjust = 0, size = 13),
        plot.subtitle = element_text(hjust = 0, face = "plain", size = 13)
    )
```

:::


#### Participant-level marginal effects

::: {.panel-tabset}

##### Catalan to English (cat-ENG)

```{r}
#| label: fig-coefs-participant-cateng
#| fig-cap: "Participant-level model posterior predicted and observed mean accuracy. Intervals represent the 95% posterior credible interval of the accuracy of each participant from Study 1 (blue) and Study 2 (red). Dots indicate the observed proportion of words participants translated the correctly."
#| fig-height: 8
#| fig-width: 5
#| warnings: false
#| messages: false
empirical_means <- list("Study 1" = responses, "Study 2" = questionnaire_responses) %>% 
    bind_rows(.id = "study") %>% 
    group_by(study, group) %>% 
    summarise(successes = sum(correct, na.rm = TRUE), n = n(), .groups = "drop") %>% 
    mutate(
        prop = prop_adj(successes, n),
        prop_se = prop_adj_se(successes, n)
    )

empirical_accuracy <- list("Study 1" = responses, "Study 2" = questionnaire_responses) %>% 
    bind_rows(.id = "study") %>% 
    mutate(translation = paste0(translation, " (", percent(lv, accuracy = 1), ")")) %>% 
    group_by(study, group, participant_id) %>% 
    summarise(prop = mean(correct), .groups = "drop")

nd_re_participants <- expand.grid(
    participant_id = unique(fit_4$data$participant_id),
    nd_std = 0,
    freq_zipf_2_std = 0,
    lv_std = 0
)

questionnaire_nd_re_participants <- expand.grid(
    participant_id = unique(questionnaire_fit_4$data$participant_id),
    nd_std = 0,
    freq_zipf_2_std = 0,
    lv_std = 0
)

participants_joint <- list(
    "Study 1" = select(participants, participant_id, group),
    "Study 2" = select(questionnaire_participants, participant_id, group)
) %>% 
    bind_rows(.id = "study")

post_re <- add_epred_draws(
    nd_re_participants, 
    fit_4, 
    ndraws = 50,
    re_formula = ~ (1 | participant_id)
)

questionnaire_post_re <- add_epred_draws(
    questionnaire_nd_re_participants, 
    questionnaire_fit_4,
    ndraws = 50, 
    re_formula = ~ (1 | participant_id)
)

post_re_join <- list("Study 1" = post_re, "Study 2" = questionnaire_post_re) %>% 
    bind_rows(.id = "study") %>% 
    group_by(study, participant_id) %>% 
    summarise(
        .mean = mean_qi(.epred)[,1], 
        .lower = mean_qi(.epred)[,2],
        .upper = mean_qi(.epred)[,3],
        .groups = "drop"
    ) %>% 
    ungroup() %>% 
    left_join(select(participants_joint, participant_id, group)) %>% 
    mutate(group = factor(group, levels = c("cat-ENG", "spa-ENG", "cat-SPA"), ordered = TRUE)) %>% 
    left_join(select(empirical_accuracy, study, group, participant_id, prop)) 

post_re_join %>% 
    mutate(participant_id = str_trunc(participant_id, 10)) %>% 
    filter(group=="cat-ENG") %>% 
    ggplot(aes(x = .mean, y = participant_id, colour = study, fill = study)) +
    facet_wrap(~study, scales = "free_y") +
    geom_errorbar(aes(xmin = .lower, xmax = .upper),
                  size = 1, width = 0,
                  position = position_dodge(width = 0.5)) + 
    geom_point(aes(x = prop), size = 2, shape = 18,
               position = position_dodge(width = 0.5)) +
    labs(
        x = "Percentage of correct responses",
        y = "Participant",
        colour = "Study",
        fill = "Study"
    ) +
    scale_x_continuous(limits = c(0, 1), labels = percent) +
    scale_y_reordered() +
    theme(
        legend.position = "none",
        legend.key = element_rect(fill = NA, colour = NA),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 5, hjust = 1),
        axis.ticks = element_blank(),
        axis.title = element_text(size = 10),
        axis.title.y = element_blank(),
        panel.grid.major.x = element_line(size = 0.15, linetype = "dotted", colour = "grey"),
        plot.caption.position = "plot",
        plot.caption = element_text(size = 9, hjust = 0, face = "plain", margin = margin(t = unit(3, "cm"))),
        plot.title.position = "plot",
        plot.title = element_text(hjust = 0, size = 13),
        plot.subtitle = element_text(hjust = 0, face = "plain", size = 13)
    )
```

##### Spanish to English (spa-ENG)

```{r}
#| label: fig-coefs-participant-spaeng
#| fig-cap: "Participant-level model posterior predicted and observed mean accuracy. Intervals represent the 95% posterior credible interval of the accuracy of each participant from Study 1 (blue) and Study 2 (red). Dots indicate the observed proportion of words participants translated the correctly."
#| fig-height: 8
#| fig-width: 5
#| warnings: false
#| messages: false
post_re_join %>% 
    filter(group=="spa-ENG") %>% 
    ggplot(aes(x = .mean, y = participant_id, colour = study, fill = study)) +
    facet_wrap(~study, scales = "free_y") +
    geom_errorbar(aes(xmin = .lower, xmax = .upper),
                  size = 1, width = 0,
                  position = position_dodge(width = 0.5)) + 
    geom_point(aes(x = prop), size = 2, shape = 18,
               position = position_dodge(width = 0.5)) +
    labs(
        x = "Percentage of correct responses",
        y = "Participant",
        colour = "Study",
        fill = "Study"
    ) +
    scale_x_continuous(limits = c(0, 1), labels = percent) +
    scale_y_reordered() +
    theme(
        legend.position = "none",
        legend.key = element_rect(fill = NA, colour = NA),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 5, hjust = 1),
        axis.ticks = element_blank(),
        axis.title = element_text(size = 10),
        axis.title.y = element_blank(),
        panel.grid.major.x = element_line(size = 0.15, linetype = "dotted", colour = "grey"),
        plot.caption.position = "plot",
        plot.caption = element_text(size = 9, hjust = 0, face = "plain", margin = margin(t = unit(3, "cm"))),
        plot.title.position = "plot",
        plot.title = element_text(hjust = 0, size = 13),
        plot.subtitle = element_text(hjust = 0, face = "plain", size = 13)
    )
```

##### Catalan to Spanish (cat-SPA)

```{r}
#| label: fig-coefs-participant-catspa
#| fig-cap: "Participant-level model posterior predicted and observed mean accuracy. Intervals represent the 95% posterior credible interval of the accuracy of each participant from Study 1 (blue) and Study 2 (red). Dots indicate the observed proportion of words participants translated the correctly."
#| fig-height: 8
#| fig-width: 5
#| warnings: false
#| messages: false
post_re_join %>% 
    filter(group=="cat-SPA") %>% 
    ggplot(aes(x = .mean, y = participant_id, colour = study, fill = study)) +
    facet_wrap(~study, scales = "free_y") +
    geom_errorbar(aes(xmin = .lower, xmax = .upper),
                  size = 1, width = 0,
                  position = position_dodge(width = 0.5)) + 
    geom_point(aes(x = prop), size = 2, shape = 18,
               position = position_dodge(width = 0.5)) +
    labs(
        x = "Percentage of correct responses",
        y = "Participant",
        colour = "Study",
        fill = "Study"
    ) +
    scale_x_continuous(limits = c(0, 1), labels = percent) +
    scale_y_reordered() +
    theme(
        legend.position = "none",
        legend.key = element_rect(fill = NA, colour = NA),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 5, hjust = 1),
        axis.ticks = element_blank(),
        axis.title = element_text(size = 10),
        axis.title.y = element_blank(),
        panel.grid.major.x = element_line(size = 0.15, linetype = "dotted", colour = "grey"),
        plot.caption.position = "plot",
        plot.caption = element_text(size = 9, hjust = 0, face = "plain", margin = margin(t = unit(3, "cm"))),
        plot.title.position = "plot",
        plot.title = element_text(hjust = 0, size = 13),
        plot.subtitle = element_text(hjust = 0, face = "plain", size = 13)
    )
```

:::


## Confidence ratings and probability of correct responses

```{r}
#| label: fig-confidence-correct 
questionnaire_responses %>%
    mutate(lv = cut(lv, breaks = seq(0, 1, 0.1), include.lowest = TRUE)) %>% 
    group_by(word_1, group, lv) %>% 
    summarise(
        n = n(),
        confidence_mean = mean(confidence),
        knowledge_prop = mean(knowledge),
        correct = sum(correct),
        .groups = "drop"
    ) %>% 
    mutate(correct_prop = prop_adj(correct, n)) %>% 
    arrange(correct_prop) %>% 
    ggplot(aes(confidence_mean, correct_prop, label = word_1)) +
    facet_grid(group~lv) +
    geom_point(alpha = 0.5) +
    geom_text_repel() +
    labs(x = "Mean confidence score", y = "P(Correct)") +
    scale_y_continuous(labels = percent, breaks = seq(0, 1, 0.25), limits = c(0, 1))

```


```{r}
#| label: tbl-confidence-correct 
a <- questionnaire_responses %>%
    group_by(translation, group, lv) %>% 
    summarise(
        n = n(),
        confidence_mean = mean(confidence),
        knowledge_prop = mean(knowledge),
        correct_prop = mean(correct),
        .groups = "drop"
    ) %>% 
    arrange(group, lv) %>% 
    select(-n) %>% 
    gt(groupname_col = "group", rowname_col = "translation") %>% 
    tab_header(title = "Word-level accuracy scores",
               subtitle = "Observed proportion of correct translation of every word used in the questionnaire (only English participants translation Catalan or Spanish), with information about their Levenshtein similarity, and mean confidence of the translation and prior knowledge with the preented word reported by participants.") %>% 
    fmt_percent(c(lv, ends_with("prop"))) %>% 
    fmt_number(confidence_mean) %>% 
    cols_label(
        translation = "Translation (ordered by Levenshtein similarity)",
        lv = "Levenshtein similarity",
        confidence_mean = "Mean confidence (0-5)",
        knowledge_prop = "Knows the word (%)",
        correct_prop = "Accuracy (%)"
    ) %>% 
    tab_style(cell_text(weight = "bold"), cells_column_labels()) %>% 
    tab_style(list(cell_text(style = "italic", weight = "bold"), cell_fill("grey")), cells_row_groups()) %>% 
    tab_style(cell_text(align = "left"), cells_title(groups = "subtitle")) %>% 
    data_color(
        columns = correct_prop,
        colors = col_numeric(
            palette = rev(c("green", "yellow", "orange", "red")),
            domain = c(0, 1)
        )
    ) %>% 
    tab_footnote(
        footnote = "Presented word, correct translation, and their correspondent IPA phonological transcription",
        locations = cells_column_labels(columns = translation)
    ) %>% 
    tab_footnote(
        footnote = "Levenshtein distance between the IPA transcriptions of the presented word and its correct translation, divided by the number of characters of the longest transcription, and substracted from 1 to make it a similarity score.",
        locations = cells_column_labels(columns = lv)
    ) %>% 
    tab_footnote(
        footnote = "Mean of the reported confidence of participants' translations, in a scale from 0 to 5.",
        locations = cells_column_labels(columns = confidence_mean)
    ) %>% 
    tab_footnote(
        footnote = "Proportion of participants that reported knowing the translation of the word in Catalan or Spanish.",
        locations = cells_column_labels(columns = knowledge_prop)
    ) %>% 
    tab_footnote(
        footnote = "Proportion of participants that translated the presented word to English correctly, colour-coded with warm colours assiged to higher accuracy scores, and colder colours assigned to lower accuracy scores.",
        locations = cells_column_labels(columns = correct_prop)
    ) %>% 
    tab_stubhead(label = "Translation")

gtsave(a, "accuracy-confidence.html")

```

